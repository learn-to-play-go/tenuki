{"version":3,"sources":["../src/ruleset.js"],"names":[],"mappings":"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","file":"ruleset.js","sourcesContent":["const VALID_KO_OPTIONS = [\n  \"simple\",\n  \"positional-superko\",\n  \"situational-superko\",\n  \"natural-situational-superko\"\n];\n\nconst Ruleset = function({ koRule }) {\n  this.koRule = koRule;\n\n  if (VALID_KO_OPTIONS.indexOf(this.koRule) < 0) {\n    throw new Error(\"Unknown ko rule: \" + koRule);\n  }\n\n  Object.freeze(this);\n};\n\nRuleset.prototype = {\n  isIllegal: function(y, x, game) {\n    const boardState = game.currentState();\n    const intersection = boardState.intersectionAt(y, x);\n\n    const result = !intersection.isEmpty() ||\n      this._wouldBeSuicide(y, x, boardState) ||\n      this._isKoViolation(y, x, boardState, game._moves);\n\n    return result;\n  },\n\n  _isKoViolation: function(y, x, boardState, existingStates) {\n    let isKoViolation = false;\n\n    if (this.koRule === \"simple\") {\n      const simpleKoPoint = boardState._simpleKoPoint();\n      isKoViolation = Boolean(simpleKoPoint) && y === simpleKoPoint.y && x === simpleKoPoint.x;\n    } else {\n      const newState = boardState.playAt(y, x, boardState.nextColor());\n\n      const hasDuplicatePosition = (condition) => {\n        return existingStates.length > 0 && existingStates.some(existingState => {\n          return condition(existingState) && existingState.positionSameAs(newState);\n        });\n      };\n\n      if (this.koRule === \"positional-superko\") {\n        isKoViolation = hasDuplicatePosition(() => true);\n      } else if (this.koRule === \"situational-superko\") {\n        isKoViolation = hasDuplicatePosition((state) => {\n          return state.color === newState.color;\n        });\n      } else if (this.koRule === \"natural-situational-superko\") {\n        isKoViolation = hasDuplicatePosition((state) => {\n          return !state.pass && state.color === newState.color;\n        });\n      } else {\n        throw new Error(`Unimplemented ko rule ${this.koRule}`);\n      }\n    }\n\n    return isKoViolation;\n  },\n\n  _wouldBeSuicide: function(y, x, boardState) {\n    const color = boardState.nextColor();\n    const intersection = boardState.intersectionAt(y, x);\n    const surroundedEmptyPoint = intersection.isEmpty() && boardState.neighborsFor(intersection.y, intersection.x).filter(neighbor => neighbor.isEmpty()).length === 0;\n\n    if (!surroundedEmptyPoint) {\n      return false;\n    }\n\n    const someFriendlyNotInAtari = boardState.neighborsFor(intersection.y, intersection.x).some(neighbor => {\n      const inAtari = boardState.inAtari(neighbor.y, neighbor.x);\n      const friendly = neighbor.isOccupiedWith(color);\n\n      return friendly && !inAtari;\n    });\n\n    if (someFriendlyNotInAtari) {\n      return false;\n    }\n\n    const someEnemyInAtari = boardState.neighborsFor(intersection.y, intersection.x).some(neighbor => {\n      const inAtari = boardState.inAtari(neighbor.y, neighbor.x);\n      const enemy = !neighbor.isOccupiedWith(color);\n\n      return enemy && inAtari;\n    });\n\n    if (someEnemyInAtari) {\n      return false;\n    }\n\n    return true;\n  }\n};\n\nexport default Ruleset;\n"]}